(()=>{"use strict";var e={904:(e,t,n)=>{n.d(t,{c:()=>A});var r=n(268),a=n.n(r),s=n(312),o=n.n(s),i=n(536),c=n.n(i),l=new URL(n(450),n.b),d=new URL(n(316),n.b),p=o()(a()),u=c()(l),m=c()(d);p.push([e.id,`@font-face {\n  font-family: 'ITC Machine Regular';\n  src: url(${u});\n}\n\n:root {\n  background-color: navy;\n  color: white;\n  font-family: Arial, Helvetica, sans-serif;\n}\n\nbody {\n  height: 100vh;\n  display: grid;\n  grid-template-rows: max-content max-content 200px;\n  justify-items: center;\n  gap: 30px;\n}\n\nh1 {\n  font-family: 'ITC Machine Regular', Arial, Helvetica, sans-serif;\n  font-size: 4rem;\n}\n\n.enter-name {\n  display: grid;\n  grid-template-rows: repeat(3, max-content);\n  gap: 10px;\n  justify-items: center;\n}\n\nbutton {\n  width: max-content;\n  padding: 5px 10px;\n  border-radius: 5px;\n  cursor: pointer;\n  align-self: center;\n}\n\n.message-box {\n  font-size: 1.5rem;\n  display: grid;\n  justify-items: center;\n  grid-template-rows: max-content max-content;\n}\n\n.all-ships {\n  display: grid;\n  grid-template-columns: max-content 200px;\n  grid-template-rows: repeat(5, 50px);\n  align-items: center;\n  justify-items: center;\n  column-gap: 30px;\n  margin: 20px 0;\n}\n\n.ship-div {\n  display: grid;\n  margin: 10px 0;\n  grid-auto-flow: column;\n  grid-auto-columns: 30px;\n  gap: 1px;\n  cursor: pointer;\n  justify-self: start;\n}\n\n.vertical {\n  grid-template-columns: repeat(5, max-content);\n}\n\n.vertical .ship-div {\n  grid-auto-flow: row;\n  justify-self: center;\n  align-self: flex-start;\n}\n\n.all-ships p {\n  margin: 0;\n}\n\n.game-content {\n  width: 100%;\n  text-align: center;\n  display: grid;\n  grid-template-columns: max-content max-content;\n  justify-content: space-evenly;\n  font-family: 'ITC Machine Regular', sans-serif;\n  font-size: 1.5rem;\n  letter-spacing: 2px;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 30px);\n  grid-template-rows: repeat(10, 30px);\n  gap: 1px;\n}\n\n.cell {\n  background-color: white;\n}\n\n.ship,\n.temp-ship {\n  background-color: gray;\n  height: 30px;\n}\n\n.attacked {\n  background-image: url(${m});\n}\n\n.hit {\n  background-color: #ff6161;\n}\n\n.clickable {\n  cursor: pointer;\n}\n`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,kCAAkC;EAClC,4CAA6C;AAC/C;;AAEA;EACE,sBAAsB;EACtB,YAAY;EACZ,yCAAyC;AAC3C;;AAEA;EACE,aAAa;EACb,aAAa;EACb,iDAAiD;EACjD,qBAAqB;EACrB,SAAS;AACX;;AAEA;EACE,gEAAgE;EAChE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,0CAA0C;EAC1C,SAAS;EACT,qBAAqB;AACvB;;AAEA;EACE,kBAAkB;EAClB,iBAAiB;EACjB,kBAAkB;EAClB,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,qBAAqB;EACrB,2CAA2C;AAC7C;;AAEA;EACE,aAAa;EACb,wCAAwC;EACxC,mCAAmC;EACnC,mBAAmB;EACnB,qBAAqB;EACrB,gBAAgB;EAChB,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,cAAc;EACd,sBAAsB;EACtB,uBAAuB;EACvB,QAAQ;EACR,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,6CAA6C;AAC/C;;AAEA;EACE,mBAAmB;EACnB,oBAAoB;EACpB,sBAAsB;AACxB;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,aAAa;EACb,8CAA8C;EAC9C,6BAA6B;EAC7B,8CAA8C;EAC9C,iBAAiB;EACjB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,uCAAuC;EACvC,oCAAoC;EACpC,QAAQ;AACV;;AAEA;EACE,uBAAuB;AACzB;;AAEA;;EAEE,sBAAsB;EACtB,YAAY;AACd;;AAEA;EACE,yDAAwC;AAC1C;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,eAAe;AACjB",sourcesContent:["@font-face {\r\n  font-family: 'ITC Machine Regular';\r\n  src: url('./fonts/ITC\\ Machine\\ Regular.otf');\r\n}\r\n\r\n:root {\r\n  background-color: navy;\r\n  color: white;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n}\r\n\r\nbody {\r\n  height: 100vh;\r\n  display: grid;\r\n  grid-template-rows: max-content max-content 200px;\r\n  justify-items: center;\r\n  gap: 30px;\r\n}\r\n\r\nh1 {\r\n  font-family: 'ITC Machine Regular', Arial, Helvetica, sans-serif;\r\n  font-size: 4rem;\r\n}\r\n\r\n.enter-name {\r\n  display: grid;\r\n  grid-template-rows: repeat(3, max-content);\r\n  gap: 10px;\r\n  justify-items: center;\r\n}\r\n\r\nbutton {\r\n  width: max-content;\r\n  padding: 5px 10px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  align-self: center;\r\n}\r\n\r\n.message-box {\r\n  font-size: 1.5rem;\r\n  display: grid;\r\n  justify-items: center;\r\n  grid-template-rows: max-content max-content;\r\n}\r\n\r\n.all-ships {\r\n  display: grid;\r\n  grid-template-columns: max-content 200px;\r\n  grid-template-rows: repeat(5, 50px);\r\n  align-items: center;\r\n  justify-items: center;\r\n  column-gap: 30px;\r\n  margin: 20px 0;\r\n}\r\n\r\n.ship-div {\r\n  display: grid;\r\n  margin: 10px 0;\r\n  grid-auto-flow: column;\r\n  grid-auto-columns: 30px;\r\n  gap: 1px;\r\n  cursor: pointer;\r\n  justify-self: start;\r\n}\r\n\r\n.vertical {\r\n  grid-template-columns: repeat(5, max-content);\r\n}\r\n\r\n.vertical .ship-div {\r\n  grid-auto-flow: row;\r\n  justify-self: center;\r\n  align-self: flex-start;\r\n}\r\n\r\n.all-ships p {\r\n  margin: 0;\r\n}\r\n\r\n.game-content {\r\n  width: 100%;\r\n  text-align: center;\r\n  display: grid;\r\n  grid-template-columns: max-content max-content;\r\n  justify-content: space-evenly;\r\n  font-family: 'ITC Machine Regular', sans-serif;\r\n  font-size: 1.5rem;\r\n  letter-spacing: 2px;\r\n}\r\n\r\n.board {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 30px);\r\n  grid-template-rows: repeat(10, 30px);\r\n  gap: 1px;\r\n}\r\n\r\n.cell {\r\n  background-color: white;\r\n}\r\n\r\n.ship,\r\n.temp-ship {\r\n  background-color: gray;\r\n  height: 30px;\r\n}\r\n\r\n.attacked {\r\n  background-image: url(./img/alpha-x.svg);\r\n}\r\n\r\n.hit {\r\n  background-color: #ff6161;\r\n}\r\n\r\n.clickable {\r\n  cursor: pointer;\r\n}\r\n"],sourceRoot:""}]);const A=p},312:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,s){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(o[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&o[d[0]]||(void 0!==s&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=s),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),t.push(d))}},t}},536:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},268:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),s="/*# ".concat(a," */");return[t].concat([s]).join("\n")}return[t].join("\n")}},596:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var s={},o=[],i=0;i<e.length;i++){var c=e[i],l=r.base?c[0]+r.base:c[0],d=s[l]||0,p="".concat(l," ").concat(d);s[l]=d+1;var u=n(p),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var A=a(m,r);r.byIndex=i,t.splice(i,0,{identifier:p,updater:A,references:1})}o.push(p)}return o}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var s=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<s.length;o++){var i=n(s[o]);t[i].references--}for(var c=r(e,a),l=0;l<s.length;l++){var d=n(s[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}s=c}}},176:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},808:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},120:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},520:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},936:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},450:(e,t,n)=>{e.exports=n.p+"73aa1b4569dafacaccd8.otf"},316:(e,t,n)=>{e.exports=n.p+"c2da584013b56ac2903b.svg"}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var s=t[r]={id:r,exports:{}};return e[r](s,s.exports,n),s.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var a=r.length-1;a>-1&&!e;)e=r[a--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var e=n(596),t=n.n(e),r=n(520),a=n.n(r),s=n(176),o=n.n(s),i=n(120),c=n.n(i),l=n(808),d=n.n(l),p=n(936),u=n.n(p),m=n(904),A={};A.styleTagTransform=u(),A.setAttributes=c(),A.insert=o().bind(null,"head"),A.domAPI=a(),A.insertStyleElement=d(),t()(m.c,A),m.c&&m.c.locals&&m.c.locals;const h=class{constructor(e,t){this.name=e,this.length=t,this.timesHit=0}hit(){this.isSunk()||(this.timesHit+=1)}isSunk(){return this.timesHit===this.length}},f=class{constructor(){this.board=[],this.previousAttacks=[];for(let e=0;e<10;e+=1){const e=[];for(let t=0;t<10;t+=1)e.push("empty");this.board.push(e)}}placeShip(e,t){const n=new h(e,t.length);t.forEach((e=>{this.board[e[0]][e[1]]=n}))}receiveAttack(e){this.previousAttacks.push(e);const t=this.board[e[0]][e[1]];"object"==typeof t?t.hit():this.board[e[0]][e[1]]="miss"}allSunk(){for(let e=0;e<10;e+=1)for(let t=0;t<10;t+=1)if("object"==typeof this.board[e][t]&&!this.board[e][t].isSunk())return!1;return!0}},g=function(e,t){for(let n=0;n<t.length;n+=1)if(t[n][0]===e[0]&&t[n][1]===e[1])return!0;return!1};class y{constructor(){this.playerBoard=new f,this.computerBoard=new f,this.possibleHits=[],this.search=!1}playerMove(e){this.computerBoard.receiveAttack(e);const t=this.computerBoard.board[e[0]][e[1]];let n="You missed the enemy";return"object"==typeof t&&(n="You hit the enemy!",t.isSunk()&&(n=`${n} You sunk the enemy's ${t.name}!`)),n}static enemyMessage(e){let t="The enemy missed you";return"object"==typeof e&&(t="The enemy hit you!",e.isSunk()&&(t=`${t} The enemy sunk your ${e.name}!`)),t}pushDirections(e){const{board:t}=this.playerBoard;t[e[0]-1]&&(g([e[0]-1,e[1]],this.playerBoard.previousAttacks)||g([e[0]-1,e[1]],this.possibleHits)||this.possibleHits.push([e[0]-1,e[1]])),t[e[0]+1]&&(g([e[0]+1,e[1]],this.playerBoard.previousAttacks)||g([e[0]+1,e[1]],this.possibleHits)||this.possibleHits.push([e[0]+1,e[1]])),!t[e[0]][e[1]-1]||g([e[0],e[1]-1],this.playerBoard.previousAttacks)||g([e[0],e[1]-1],this.possibleHits)||this.possibleHits.push([e[0],e[1]-1]),!t[e[0]][e[1]+1]||g([e[0],e[1]+1],this.playerBoard.previousAttacks)||g([e[0],e[1]+1],this.possibleHits)||this.possibleHits.push([e[0],e[1]+1])}searchAndDestroy(){const e=this.possibleHits.shift();return this.playerBoard.receiveAttack(e),"object"==typeof this.playerBoard.board[e[0]][e[1]]&&this.pushDirections(e),0===this.possibleHits.length&&(this.search=!1),this.playerBoard.board[e[0]][e[1]]}computerMove(){let e,t=Math.floor(10*Math.random()),n=Math.floor(10*Math.random());if(!0===this.search)e=this.searchAndDestroy();else{for(;g([t,n],this.playerBoard.previousAttacks);)t=Math.floor(10*Math.random()),n=Math.floor(10*Math.random());this.playerBoard.receiveAttack([t,n]),e=this.playerBoard.board[t][n],"object"==typeof e&&(this.search=!0,this.pushDirections([t,n]))}return y.enemyMessage(e)}}const C=y,E={startGame(e){e.preventDefault();const t=document.querySelector("#name").value;e.target.reset();const n=document.querySelector("form");n.style.display="none";const r=document.createElement("div"),a=document.createElement("p"),s=document.createElement("p"),o=document.createElement("div"),i=document.createElement("div"),c=document.createElement("div"),l=document.createElement("h3"),d=document.createElement("h3"),p=document.createElement("div"),u=document.createElement("div");r.classList.add("message-box"),o.classList.add("game-content"),i.classList.add("player-content"),c.classList.add("player-content"),l.classList.add("caption"),d.classList.add("caption"),p.setAttribute("class","board-container"),p.setAttribute("id","player"),u.setAttribute("class","board-container"),u.setAttribute("id","enemy"),l.textContent=t?`${t}'s Fleet`:"Player's Fleet",d.textContent="Enemy Fleet",r.appendChild(a),r.appendChild(s),i.appendChild(l),i.appendChild(p),c.appendChild(d),c.appendChild(u),o.appendChild(i),o.appendChild(c),document.body.insertBefore(r,n),document.body.insertBefore(o,r)},endGame(){const e=document.querySelector(".message-box"),t=document.createElement("button");t.classList.add("new-game"),t.textContent="New Game",e.appendChild(t)},openForm(){const e=document.querySelector(".message-box"),t=document.querySelector(".game-content"),n=document.querySelector("form");e.remove(),t.remove(),n.style.display="block"},buildBoard(e,t,n){const r=document.createElement("div");r.classList.add("board");for(let a=0;a<100;a+=1){const s=document.createElement("div");s.classList.add("cell"),s.dataset.cell=a,"object"!=typeof e.board[Math.floor(a/10)][a%10]||"player"!==t&&"game over"!==n||s.classList.add("ship"),"computer"!==t||"normal play"!==n||s.classList.contains("attacked")||s.classList.add("clickable");for(let t=0;t<e.previousAttacks.length;t+=1)e.previousAttacks[t][0]===Math.floor(a/10)&&e.previousAttacks[t][1]===a%10&&(s.classList.add("attacked"),"object"==typeof e.board[Math.floor(a/10)][a%10]&&s.classList.add("hit"));r.appendChild(s)}return r},appendBoards(e,t,n){const r=E.buildBoard(e,"player",n),a=E.buildBoard(t,"computer",n),s=document.querySelectorAll(".board-container");s[0].textContent="",s[1].textContent="",s[0].appendChild(r),s[1].appendChild(a)},newMessage(e,t){const n=document.querySelectorAll(".message-box p");n[0].textContent=e,n[1].textContent=t}},v=E,b={isVertical:!1,ships:[{name:"Carrier",size:5,inFleet:!1},{name:"Battleship",size:4,inFleet:!1},{name:"Destroyer",size:3,inFleet:!1},{name:"Submarine",size:3,inFleet:!1},{name:"Patrol Boat",size:2,inFleet:!1}],shipsPlaced(){const e=document.querySelector(".start"),t=document.querySelector(".rotate"),n=document.querySelector(".all-ships");t.remove(),n.remove(),e.style.display="inline"},dropHandler(e,t){e.preventDefault();const n=e.dataTransfer.getData("text"),r=document.querySelector(`#${n}`),a=r.childElementCount,s=e.target.classList,{cell:o}=e.target.dataset;if(!this.isVertical&&o%10+a>10||this.isVertical&&Math.floor(o/10)+a>10||!s.contains("cell")||s.contains("ship"))return void s.remove("temp-ship");const i=[];for(let e=0;e<a;e+=1)this.isVertical?i.push([Math.floor(o/10)+e,o%10]):i.push([Math.floor(o/10),o%10+e]);t.playerBoard.placeShip(n,i),r.textContent="",v.appendBoards(t.playerBoard,t.computerBoard,"ship placing");const c="Patrol-Boat"===n?"Patrol Boat":n,l=this.ships.find((e=>e.name===c));l.inFleet=!0;for(let e=0;e<this.ships.length;e+=1)if(!this.ships[e].inFleet)return;this.shipsPlaced()},createShips(){const e=document.querySelector(".all-ships");this.isVertical?e.classList.add("vertical"):e.classList.remove("vertical"),this.isVertical&&this.ships.forEach((t=>{const n=document.createElement("p");n.textContent=t.name,e.append(n)})),this.ships.forEach((t=>{const n=document.createElement("div");n.classList.add("ship-div");const r="Patrol Boat"===t.name?"Patrol-Boat":t.name;if(n.setAttribute("id",r),n.setAttribute("draggable","true"),!t.inFleet)for(let e=0;e<t.size;e+=1){const t=document.createElement("div");t.classList.add("ship"),t.dataset.cell=e,n.appendChild(t)}if(!this.isVertical){const n=document.createElement("p");n.textContent=t.name,e.append(n)}e.append(n),n.addEventListener("dragstart",(e=>{e.dataTransfer.setData("text",e.target.id)}))}))},place(e){const t=document.querySelector(".message-box"),n=document.querySelector("#player"),r=document.createElement("button"),a=document.createElement("div"),s=document.createElement("button");this.ships=[{name:"Carrier",size:5,inFleet:!1},{name:"Battleship",size:4,inFleet:!1},{name:"Destroyer",size:3,inFleet:!1},{name:"Submarine",size:3,inFleet:!1},{name:"Patrol Boat",size:2,inFleet:!1}],r.textContent="Start",s.textContent="Rotate",r.classList.add("start"),s.classList.add("rotate"),a.classList.add("all-ships"),r.style.display="none",t.appendChild(r),t.appendChild(s),t.append(a),s.addEventListener("click",(()=>{this.isVertical=!this.isVertical,a.textContent="",this.createShips()})),v.appendBoards(e.playerBoard,e.computerBoard,"ship placing"),this.createShips(),n.addEventListener("dragover",(e=>{e.preventDefault(),e.target.classList.add("temp-ship")})),n.addEventListener("dragleave",(e=>{e.preventDefault(),e.target.classList.remove("temp-ship")})),n.addEventListener("drop",(t=>{this.dropHandler(t,e)}))}},B=b,x=document.querySelector("form");let k,w,S=!1;function M(e){if(e.stopImmediatePropagation(),e.target.classList.contains("cell")&&!e.target.classList.contains("attacked")){const{cell:t}=e.target.dataset,n=k.playerMove([Math.floor(t/10),t%10]),r=k.computerMove();v.newMessage(n,r),v.appendBoards(k.playerBoard,k.computerBoard,"normal play")}(k.playerBoard.allSunk()||k.computerBoard.allSunk())&&(function(){if(S)return;k.computerBoard.allSunk()?v.newMessage("Enemy fleet sunk! You win!"):v.newMessage("Your fleet was sunk! Game over!"),v.appendBoards(k.playerBoard,k.computerBoard,"game over"),v.endGame();const e=document.querySelector("#enemy"),t=document.querySelector(".new-game");e.replaceWith(e.cloneNode(!0)),t.addEventListener("click",v.openForm)}(),S=!0)}x.addEventListener("submit",(e=>{k=new C,v.startGame(e),B.place(k),w=document.querySelector(".start"),w.addEventListener("click",(()=>{var e;e=k.computerBoard,[{name:"Carrier",size:5},{name:"Battleship",size:4},{name:"Destroyer",size:3},{name:"Submarine",size:3},{name:"Patrol Boat",size:2}].forEach((t=>{let n=!0;for(;n;)if(0===Math.floor(2*Math.random())){const r=Math.floor(10*Math.random()),a=Math.floor(Math.random()*(10-t.size));let s=!0;for(let n=0;n<=t.size;n+=1)if("object"==typeof e.board[r][a+n]){s=!1;break}if(s){const n=[];for(let e=0;e<t.size;e+=1)n.push([r,a+e]);e.placeShip(t.name,n)}n=!s}else{const r=Math.floor(Math.random()*(10-t.size)),a=Math.floor(10*Math.random());let s=!0;for(let n=0;n<=t.size;n+=1)if("object"==typeof e.board[r+n][a]){s=!1;break}if(s){const n=[];for(let e=0;e<t.size;e+=1)n.push([r+e,a]);e.placeShip(t.name,n)}n=!s}})),v.appendBoards(k.playerBoard,k.computerBoard,"normal play"),v.newMessage("Fire when ready!"),document.querySelector("#enemy").addEventListener("click",M),w.remove()}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,